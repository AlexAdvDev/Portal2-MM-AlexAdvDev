//////////////////////
// Boilerplate code //
//////////////////////

/*
    // fresh start just a basic template for map development //

    //## MAPNAME ##//
    if (GetMapName()=="LEVELNAME") {
        if (MSInstantRun==true) {

        }

        if (MSPostPlayerSpawn==true) {

        }

        if (MSLoop==true) {

        }
    }

    // Use with new Aperture maps //

    //## MAPNAME ##//
    if (GetMapName()=="LEVELNAME") {
        if (MSInstantRun==true) {
            // Make elevator start moving on level load
            EntFireByHandle(Entities.FindByName(null, "arrival_elevator-elevator_1"), "StartForward", "", 0, null, null)
            // Destroy objects
            Entities.FindByName(null, "door_0-close_door_rl").Destroy()
        }

        if (MSPostPlayerSpawn==true) {
            NewApertureStartElevatorFixes()
        }

        if (MSLoop==true) {
            // Elevator changelevel
            local p = null
            while(p = Entities.FindByClassnameWithin(p, "player", Vector(1, 2, 3), 50)) {
                SendToConsole("changelevel LEVELNAME")
            }
        }
    }

    // Use with new Aperture maps //

    //## MAPNAME ##//
    if (GetMapName()=="LEVELNAME") {
        if (MSInstantRun==true) {
            // Make elevator start moving on level load
            EntFireByHandle(Entities.FindByName(null, "arrival_elevator-elevator_1"), "StartForward", "", 0, null, null)
            // Destroy objects
            Entities.FindByName(null, "door_0-close_door_rl").Destroy()
        }

        if (MSPostPlayerSpawn==true) {
            NewApertureStartElevatorFixes()
        }

        if (MSLoop==true) {
            // Elevator changelevel
            local p = null
            while(p = Entities.FindByClassnameWithin(p, "player", Vector(1, 2, 3), 50)) {
                SendToConsole("changelevel LEVELNAME")
            }
        }
    }

    // Use with maps without entrance or exit elevators //

    //## MAPNAME ##//
    if (GetMapName()=="LEVELNAME") {
        if (MSInstantRun==true) {
            // Here if we need to ent_fire something
            EntFireByHandle(Entities.FindByName(null, "NAME"), "ACTION", "VALUE", DELAYiny, ACTIVATOR, CALLER)
            // Destroy objects
            Entities.FindByName(null, "NAME").Destroy()
        }

        if (MSPostPlayerSpawn==true) {

        }

        if (MSLoop==true) {
            // Make our own changelevel trigger
            local p = null
            while(p = Entities.FindByClassnameWithin(p, "player", Vector(1, 2, 3), 50)) {
                SendToConsole("changelevel LEVELNAME")
            }
        }
    }

    // Use with old Aperture maps //

    //## MAPNAME ##//
    if (GetMapName()=="LEVELNAME") {
        if (MSInstantRun==true) {
            // Make elevator start moving on level load
            EntFireByHandle(Entities.FindByName(null, "InstanceAuto8-entrance_lift_train"), "StartForward", "", 0, null, null)
            // Destroy objects
            Entities.FindByName(null, "fade_to_death-proxy").Destroy()
        }

        if (MSPostPlayerSpawn==true) {

        }

        if (MSLoop==true) {
            // Elevator changelevel
            local p = null
            while(p = Entities.FindByClassnameWithin(p, "player", Vector(1, 2, 3), 100)) {
                SendToConsole("changelevel LEVELNAME")
            }
        }
    }


// Destroy object using FindByName
Entities.FindByName(null, "NAME").Destroy()

// Find and destroy object using FindByClassnameNearest within 1 unit of given vector
Entities.FindByClassnameNearest("CLASS", Vector(1, 2, 3), 1).Destroy()

// Changelevel trigger
local p = null
while(p = Entities.FindByClassnameWithin(p, "player", Vector(1, 2, 3), 50)) {
    SendToConsole("changelevel LEVELNAME")
}

local ent = null
while (ent = Entities.FindByClassname(ent, "CLASSNAME")) {
    ent.Destroy()
}

// Make Wheatley look at nearest player
local ClosestPlayerMain = Entities.FindByClassnameNearest("player", Entities.FindByName(null, "spherebot_1_bottom_swivel_1").GetOrigin(), 10000)
EntFireByHandle(Entities.FindByName(null, "spherebot_1_bottom_swivel_1"), "SetTargetEntity", ClosestPlayerMain.GetName(), 0, null, null)

if (GetMapName() == "MAPNAME") {
    SendToConsole("commentary 0")
}




            EntFireByHandle(Entities.FindByClassnameNearest("trigger_once", Vector(-32, -1032, 32), 20), "addoutput", "OnTrigger moja2:SetAnimation:vert_door_opening", 0, null, null)
            EntFireByHandle(Entities.FindByClassnameNearest("trigger_once", Vector(-32, -1032, 32), 20), "addoutput", "OnTrigger moja3:Disable", 0, null, null)
            EntFireByHandle(Entities.FindByClassnameNearest("trigger_once", Vector(-32, -1032, 32), 20), "addoutput", "OnTrigger moja3:Disable::delay:MaxFireTimes-1inf40=40", 0, null, null)




// ent_fire an object
EntFireByHandle(Entities.FindByName(null, "NAME"), "ACTION", "VALUE", DELAYiny, ACTIVATOR, CALLER)

// Pretty sure this is unified in the NewAperture function use find to delete unused entrys (Moja)
try {
    EntFireByHandle(Entities.FindByName(null, "arrival_elevator-light_elevator_fill"), "TurnOn", "", 0, null, null)
} catch(exception) {}
*/